// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @title MediaChain - Media Distribution Contract
 * @dev:ianlucas2306@gmail.com Connects with frontend and off-chain database
 */
contract MediaChain {
    // File structure
    struct Media {
        string fileHash; // SHA3 hash of the file
        address owner;   // Content owner
        uint256 price;   // Price in wei
        uint256 downloads; // Download count
    }

    // Mappings
    mapping(uint256 => Media) public files;
    mapping(address => uint256[]) private userFiles;
    mapping(bytes32 => bool) private hashExists;

    uint256 public fileCount;
    
    // Events for database synchronization
    event FileUploaded(
        uint256 indexed fileId,
        address indexed owner,
        string fileHash,
        uint256 price,
        uint256 timestamp
    );
    
    event FilePurchased(
        uint256 indexed fileId,
        address indexed buyer,
        address indexed owner,
        uint256 price,
        uint256 timestamp
    );

    // Upload file with metadata
    function uploadFile(string calldata _fileHash, uint256 _price) external {
        bytes32 hash = keccak256(abi.encodePacked(_fileHash));
        require(!hashExists[hash], "File already exists");
        
        files[fileCount] = Media({
            fileHash: _fileHash,
            owner: msg.sender,
            price: _price,
            downloads: 0
        });
        
        userFiles[msg.sender].push(fileCount);
        hashExists[hash] = true;
        
        emit FileUploaded(
            fileCount,
            msg.sender,
            _fileHash,
            _price,
            block.timestamp
        );
        
        fileCount++;
    }

    // Purchase file with payment
    function purchaseFile(uint256 _fileId) external payable {
        require(_fileId < fileCount, "Invalid file ID");
        require(msg.value >= files[_fileId].price, "Insufficient payment");
        
        files[_fileId].downloads++;
        payable(files[_fileId].owner).transfer(msg.value);
        
        emit FilePurchased(
            _fileId,
            msg.sender,
            files[_fileId].owner,
            msg.value,
            block.timestamp
        );
    }

    // Get file info
    function getFileInfo(uint256 _fileId) external view returns (
        string memory,
        address,
        uint256,
        uint256
    ) {
        require(_fileId < fileCount, "Invalid file ID");
        Media storage file = files[_fileId];
        return (
            file.fileHash,
            file.owner,
            file.price,
            file.downloads
        );
    }

    // Get files owned by a user
    function getUserFiles(address _user) external view returns (uint256[] memory) {
        return userFiles[_user];
    }
}
